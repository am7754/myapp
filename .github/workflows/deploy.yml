name: Deploy to GKE

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: development

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Set Terraform Variables
        run: |
          echo "PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          echo "REGION=${{ secrets.GCP_REGION }}" >> $GITHUB_ENV
          echo "REPO_NAME=${{ secrets.GCP_REPO_NAME }}" >> $GITHUB_ENV
          echo "CLUSTER_NAME=${{ secrets.GCP_CLUSTER_NAME }}" >> $GITHUB_ENV
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        working-directory: ./terraform

      # Import existing resources into Terraform
      - name: Import Existing Resources
        run: |
          terraform import google_artifact_registry_repository.my_docker_repo  projects/festive-shield-433206-t8/locations/us-central1/repositories/my-docker-repo
          terraform import google_container_cluster.my-gke-cluster projects/festive-shield-433206-t8/locations/us-central1-f/clusters/my-gke-cluster-2
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        working-directory: ./terraform

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        working-directory: ./terraform

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        working-directory: ./terraform


      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}
          export_default_credentials: true

      - name: Create Kubernetes cluster (if necessary)
        run: |
            gcloud container clusters create my-gke-cluster --region us-central1-f --num-nodes=1 --disk-size=30 || true

      - name: Configure kubectl
        run: gcloud container clusters get-credentials my-gke-cluster --region us-central1-f --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Build and push Docker image
        run: |
          docker build -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-docker-repo/myapp:latest .
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-docker-repo/myapp:latest

      - name: Deploy with Helm
        run: |
          helm upgrade --install myapp ./helm/myapp --set image.repository=gcr.io/${{ secrets.GCP_PROJECT_ID }}/myapp --set image.tag=latest
